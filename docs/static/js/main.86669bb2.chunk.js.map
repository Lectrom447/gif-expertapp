{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","id","type","placeholder","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GiftGridItem","className","src","alt","GiftGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAIaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EACRC,mBAAS,IADD,mBACpCC,EADoC,KACzBC,EADyB,KAgB3C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMYO,GAAG,eAAjC,SACI,uBACQC,KAAK,OACLC,YAAY,qCACZC,MAAOX,EACPY,SAnBS,SAAAT,GACrBU,QAAQC,IAAIX,EAAEY,OAAOJ,OACrBV,EAAcE,EAAEY,OAAOJ,a,+BCRlBK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHnB,GAAImB,EAAInB,GACRoB,MAAOD,EAAIC,MACXT,IAAKQ,EAAIE,OAAOC,iBAAiBX,QATtB,kBAaZM,GAbY,4CAAH,sDCCPM,EAAe,SAAC,GAAmB,EAAlBvB,GAAmB,IAAhBoB,EAAe,EAAfA,MAAMT,EAAS,EAATA,IACnC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCDHO,EAAW,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECFZ,SAACA,GAAc,IAAD,EACZlB,mBAAS,CAC/ByB,KAAM,GACNY,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAZAC,qBAAW,WACPvB,EAAQC,GACPuB,MAAK,SAAAb,GACFW,EAAS,CACLd,KAAKG,EACLS,SAAS,SAGnB,CAACnB,IAIIoB,EDdsBI,CAAaxB,GAA/BY,EADyB,EAC9BL,KAAYY,EADkB,EAClBA,QAGlB,OACI,qCACI,6BAAKnB,IACJmB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEYH,EAAOH,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAAkCA,GAAbA,EAAInB,aEctCkC,EA1Ba,WAAO,IAAD,EAEM3C,mBAAS,CAAC,gBAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAM9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ6C,EAAWjB,KAAI,SAACT,GACZ,OAAO,cAAC,EAAD,CAEKA,SAAUA,GADHA,Y,MCb3C2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.86669bb2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories}) =>{\n    const [inputValue,setInputValue] = useState('');\n\n    const handleInputCahge = e => {\n        console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            setCategories(cats => [inputValue,...cats])\n            setInputValue('')\n        }\n\n\n    }\n    return(\n        <form onSubmit={handleSubmit} id='CategoryForm'>\n            <input\n                    type='text'\n                    placeholder='Escriba una categoria para agregar'\n                    value={inputValue}\n                    onChange={handleInputCahge} \n                />\n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}","\nexport const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=sIgw3tpIn2pMRc18R1ba4tGEoAiZd5TY`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url,\n        }\n    })\n\n    return gifs;\n    \n\n}","import React from 'react'\n\nexport const GiftGridItem = ({id,title,url}) => {\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GiftGridItem } from './GiftGridItem';\n\n\nexport const GiftGrid = ({category}) => {\n   const {data:images,loading} = useFetchGifs(category);\n\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p className='animate__animated animate__flash'>Loading...</p>}\n            <div className='card-grid'>\n                    {\n                        images.map((img) =>(\n                            <GiftGridItem key = {img.id}  {...img} />\n                        ))\n                    }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading:true\n    });\n    useEffect( ()=>{\n        getGifs(category)\n        .then(img =>{\n            setstate({\n                data:img,\n                loading: false\n            });\n        })\n    },[category])\n\n\n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GiftGrid } from './components/GiftGrid';\n\nexport const GifExpertApp = () => {\n   \n    const [categories, setCategories] = useState(['Dragon Ball'])\n\n   // const hundleAdd = () => setCategories([...categories , 'TEST']);\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories ={setCategories} />\n            <hr/>\n            <ol>\n                {\n                    categories.map((category) =>{\n                        return <GiftGrid \n                                    key = {category}\n                                    category={category} \n                                 />\n                    })\n                }\n            </ol>\n\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}